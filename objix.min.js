const P=Object.prototype,E=Object.entries,V=Object.values,F=Object.fromEntries,K=Object.keys,A=Object.assign;P.map=function(t){return F(E(this).map((([n,r])=>[n,t(r,n)])))},P.apply=function(t){return E(this).map((([n,r])=>this[n]=t(r,n))),this},P.values=function(){return V(this)},P.keys=function(){return K(this)},P.entries=function(){return E(this)},P.filter=function(t){return F(E(this).flatMap((([n,r])=>t(r,n)?[[n,r]]:[])))},P.flatMap=function(t){return F(E(this).flatMap((([n,r])=>t(n,r))))},P.clean=function(){return F(E(this).flatMap((([t,n])=>n?[[t,n]]:[])))},P.isArray=function(){return this instanceof Array},P.find=function(t){for(let[n,r]of E(this))if(t(r,n))return n},P.assign=function(...t){return A({},this,...t)},P.merge=function(...t){return A({},...t,this)},P.patch=function(...t){return A(this,...t)},P.delete=function(...t){for(let n of t)delete this[n];return this},P.some=function(t){return V(this).some(t)},P.every=function(t){return V(this).every(t)},P.json=function(t){return JSON.stringify(this)},P.clone=function(){return A({},this)},P.join=function(...t){let n=A({},this);for(let r of t)E(r).forEach((([t,r])=>n[t]&&=[].concat(n[t],r)));return n},P.split=function(){let t=[];for(let[n,r]of E(this))r.forEach(((r,e)=>t[e]?t[e][n]=r:t[e]={[n]:r}));return t},P.common=function(t){return F(E(this).flatMap((([n,r])=>t[n]==r?[[n,r]]:[])))},P.contains=function(t){for(let[n,r]of E(t))if(this[n]!=r)return!1;return!0},P.equals=function(t){let n=E(this);if(n.length!=K(t).length)return!1;for(let[r,e]of n)if(t[r]!=e)return!1;return!0},P.size=function(){return K(this).length};P.index = function(ar,k){ar.forEach(o=>this[o[k]]=thisconst P=Object.prototype,E=Object.entries,V=Object.values,F=Object.fromEntries,K=Object.keys,A=Object.assign;for(let t of["keys","values","entries"])P[t]=function(){return Object[t](this)};for(let t of["some","every"])P[t]=function(n){return V(this)[t](n)};P.map=function(t){return F(E(this).map((([n,e])=>[n,t(e,n)])))},P.apply=function(t){return E(this).map((([n,e])=>this[n]=t(e,n))),this},P.filter=function(t){return F(E(this).flatMap((([n,e])=>t(e,n)?[[n,e]]:[])))},P.flatMap=function(t){return F(E(this).flatMap((([n,e])=>t(n,e))))},P.clean=function(){return F(E(this).flatMap((([t,n])=>n?[[t,n]]:[])))},P.isArray=function(){return this instanceof Array},P.find=function(t){for(let[n,e]of E(this))if(t(e,n))return n},P.assign=function(...t){return A({},this,...t)},P.merge=function(...t){return A({},...t,this)},P.patch=function(...t){return A(this,...t)},P.delete=function(...t){for(let n of t)delete this[n];return this},P.json=function(t){return JSON.stringify(this)},P.clone=function(){return A({},this)},P.join=function(...t){let n=A({},this);for(let e of t)E(e).map((([t,e])=>n[t]&&=[].concat(n[t],e)));return n},P.split=function(){let t=[];for(let[n,e]of E(this))e.map(((e,i)=>t[i]?t[i][n]=e:t[i]={[n]:e}));return t},P.common=function(t){return F(E(this).flatMap((([n,e])=>t[n]==e?[[n,e]]:[])))},P.contains=function(t){for(let[n,e]of E(t))if(this[n]!=e)return!1;return!0},P.equals=function(t,n){if(K(this).length!=K(t).length)return!1;for(let[e,i]of E(this))if(!(i==t[e]||n&&i.equals(t[e],n-1)))return!1;return!0},P.size=function(){return K(this).length},P.index=function(t,n){return n.map((n=>this[n[t]]=this[n[t]]?[n].concat(this[n[t]]):n)),this};[o[k]]?[o].concat(this[o[k]]):o);return this};