const P=Object.prototype,E=Object.entries,F=Object.fromEntries;P.map=function(t){return F(E(this).map((([n,r])=>[n,t(r,n)])))},P.apply=function(t){return E(this).map((([n,r])=>this[n]=t(r,n))),this},P.values=function(t){return Object.values(this)},P.keys=function(){return Object.keys(this)},P.entries=function(){return E(this)},P.filter=function(t){return F(E(this).flatMap((([n,r])=>t(r,n)?[[n,r]]:[])))},P.flatMap=function(t){return F(E(this).flatMap((([n,r])=>t(n,r))))},P.clean=function(){return F(E(this).flatMap((([t,n])=>n?[[t,n]]:[])))},P.isArray=function(){return this instanceof Array},P.find=function(t){for(const[n,r]of E(this))if(t(r,n))return n},P.assign=function(...t){return Object.assign({},this,...t)},P.merge=function(...t){return Object.assign({},...t,this)},P.patch=function(...t){return Object.assign(this,...t)},P.delete=function(...t){for(const n of t)delete this[n];return this},P.some=function(t){return Object.values(this).some(t)},P.every=function(t){return Object.values(this).every(t)},P.toString=function(t){return JSON.stringify(this)},P.json=function(t){return JSON.stringify(this)},P.clone=function(){return Object.assign({},this)},P.join=function(...t){const n=Object.assign({},this);for(const r of t)E(r).forEach((([t,r])=>n[t]&&=[].concat(n[t],r)));return n},P.split=function(){const t=[];for(const[n,r]of E(this))r.forEach(((r,i)=>t[i]?t[i][n]=r:t[i]={[n]:r}));return t},P.common=function(t){return F(E(this).flatMap((([n,r])=>t[n]==r?[[n,r]]:[])))},P.contains=function(t){for(const[n,r]of E(t))if(this[n]!=r)return!1;return!0},P.within=function(t){for(const[n,r]of E(this))if(t[n]!=r)return!1;return!0},P.equals=function(t){const n=E(this);if(n.length!=Object.keys(t).length)return!1;for(const[r,i]of n)if(t[r]!=i)return!1;return!0},P.size=function(){return E(this).length};